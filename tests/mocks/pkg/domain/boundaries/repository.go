// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/boundaries/repository.go

// Package mock_boundaries is a generated GoMock package.
package mock_boundaries

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "spells.tvblackman1.ru/pkg/domain/dto"
)

// MockTagsRepository is a mock of TagsRepository interface.
type MockTagsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTagsRepositoryMockRecorder
}

// MockTagsRepositoryMockRecorder is the mock recorder for MockTagsRepository.
type MockTagsRepositoryMockRecorder struct {
	mock *MockTagsRepository
}

// NewMockTagsRepository creates a new mock instance.
func NewMockTagsRepository(ctrl *gomock.Controller) *MockTagsRepository {
	mock := &MockTagsRepository{ctrl: ctrl}
	mock.recorder = &MockTagsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagsRepository) EXPECT() *MockTagsRepositoryMockRecorder {
	return m.recorder
}

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersRepository) CreateUser(dto dto.UserToRepositoryDto) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser", dto)
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersRepositoryMockRecorder) CreateUser(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersRepository)(nil).CreateUser), dto)
}

// MockSourcesRepository is a mock of SourcesRepository interface.
type MockSourcesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSourcesRepositoryMockRecorder
}

// MockSourcesRepositoryMockRecorder is the mock recorder for MockSourcesRepository.
type MockSourcesRepositoryMockRecorder struct {
	mock *MockSourcesRepository
}

// NewMockSourcesRepository creates a new mock instance.
func NewMockSourcesRepository(ctrl *gomock.Controller) *MockSourcesRepository {
	mock := &MockSourcesRepository{ctrl: ctrl}
	mock.recorder = &MockSourcesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourcesRepository) EXPECT() *MockSourcesRepositoryMockRecorder {
	return m.recorder
}

// MockSetsRepository is a mock of SetsRepository interface.
type MockSetsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSetsRepositoryMockRecorder
}

// MockSetsRepositoryMockRecorder is the mock recorder for MockSetsRepository.
type MockSetsRepositoryMockRecorder struct {
	mock *MockSetsRepository
}

// NewMockSetsRepository creates a new mock instance.
func NewMockSetsRepository(ctrl *gomock.Controller) *MockSetsRepository {
	mock := &MockSetsRepository{ctrl: ctrl}
	mock.recorder = &MockSetsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetsRepository) EXPECT() *MockSetsRepositoryMockRecorder {
	return m.recorder
}

// MockSpellsRepository is a mock of SpellsRepository interface.
type MockSpellsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpellsRepositoryMockRecorder
}

// MockSpellsRepositoryMockRecorder is the mock recorder for MockSpellsRepository.
type MockSpellsRepositoryMockRecorder struct {
	mock *MockSpellsRepository
}

// NewMockSpellsRepository creates a new mock instance.
func NewMockSpellsRepository(ctrl *gomock.Controller) *MockSpellsRepository {
	mock := &MockSpellsRepository{ctrl: ctrl}
	mock.recorder = &MockSpellsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpellsRepository) EXPECT() *MockSpellsRepositoryMockRecorder {
	return m.recorder
}
